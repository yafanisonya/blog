(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{418:function(t,e,s){"use strict";s.r(e);var a=s(55),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"css-normalize、css-reset"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#css-normalize、css-reset"}},[t._v("#")]),t._v(" CSS Normalize、CSS Reset")]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("CSS Normalize")]),t._v(" :")]),t._v(" "),s("ul",[s("li",[t._v("在 index.css 添加 @import-normalize")]),t._v(" "),s("li",[t._v("保证页面在不同浏览器上默认样式相近")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("CSS Reset")])]),t._v(" "),s("ul",[s("li",[t._v("重置浏览器的默认样式")])])])]),t._v(" "),s("h2",{attrs:{id:"dart-sass、-node-sass-区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dart-sass、-node-sass-区别"}},[t._v("#")]),t._v(" dart-sass、 node-sass 区别")]),t._v(" "),s("blockquote",[s("p",[t._v("Dart Sass 是 Sass 的主要实现，最新的特性都会在这个上面先实现，快速、易于安装，并且可以编译为纯 JavaScript，从而可以轻松集成到现代 Web 开发工作流中。")])]),t._v(" "),s("ul",[s("li",[s("p",[t._v("node-sass 是用 node (调用 cpp 编写的 libsass) 来编译 sass。")])]),t._v(" "),s("li",[s("p",[t._v("dart-sass 是用 drat VM 来编译 sass。")])]),t._v(" "),s("li",[s("p",[t._v("node-sass 是实时自动编译的，dart-sass 需要保存后才会生效。")])])]),t._v(" "),s("h2",{attrs:{id:"import-配置路径别名"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#import-配置路径别名"}},[t._v("#")]),t._v(" import 配置路径别名")]),t._v(" "),s("ul",[s("li",[t._v("@import 'xxx/yyy' 引入 src/xxx/yyy.scss")]),t._v(" "),s("li",[t._v("import 'xxx/yyy.tsx' 引入 src/xxx/yyy.tsx")])]),t._v(" "),s("blockquote",[s("p",[t._v('在 tsconfig.json 添加 "baseUrl":"src"')])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('{\n  "compilerOptions": {\n    "baseUrl": "src",\n  },\n  "include": [\n    "src"\n  ]\n}\n')])])]),s("h2",{attrs:{id:"styled-components"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#styled-components"}},[t._v("#")]),t._v(" styled-components")]),t._v(" "),s("p",[s("strong",[t._v("CSS-in-JS")]),t._v("：将 CSS 样式写在 JS 文件里面")]),t._v(" "),s("p",[s("strong",[t._v("如何使用")])]),t._v(" "),s("ul",[s("li",[t._v("安装 yarn add styled-components")]),t._v(" "),s("li",[t._v("安装 ts 类型声明文件 yarn add --dev @types/styled-components")]),t._v(" "),s("li",[t._v("vscode 插件 vscode-styled-components")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("import React from 'react';\n\nimport styled from 'styled-components';\n\nconst Title = styled.h1`\n  font-size: 1.5em;\n  text-align: center;\n  color: palevioletred;\n`;\n\nconst Wrapper = styled.section`\n  padding: 4em;\n  background: papayawhip;\n`;\n\n<Wrapper>\n  <Title>Hello World</Title>\n</Wrapper>\n")])])]),s("h2",{attrs:{id:"react-router-dom"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#react-router-dom"}},[t._v("#")]),t._v(" react-router-dom")]),t._v(" "),s("p",[s("strong",[t._v("如何使用")])]),t._v(" "),s("ul",[s("li",[t._v("yarn add react-router-dom")]),t._v(" "),s("li",[t._v("yarn add --dev @types/react-router-dom")])]),t._v(" "),s("h2",{attrs:{id:"webpack-引入-svg-sprite-loader"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#webpack-引入-svg-sprite-loader"}},[t._v("#")]),t._v(" webpack 引入 svg-sprite-loader")]),t._v(" "),s("blockquote",[s("p",[t._v("create-react-app 安装以后，没有 webpack 相关的配置的目录，通过 yarn eject 进行自定义配置")])]),t._v(" "),s("p",[s("strong",[t._v("svg 雪碧图")]),t._v(":利用 svg 的 symbol 元素，将每个 icon 包括在 symbol 中，通过 use 元素使用该 symbol.")]),t._v(" "),s("p",[s("strong",[t._v("原理")])]),t._v(" "),s("ul",[s("li",[t._v("symbol + use:xlink:href")]),t._v(" "),s("li",[t._v("svg-sprite-loader 生成雪碧图")]),t._v(" "),s("li",[t._v("require.context 动态引入所有文件")])]),t._v(" "),s("p",[s("strong",[t._v("如何配置")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("{\n  test: /\\.svg$/,\n  use: [\n    { loader: 'svg-sprite-loader', options: {} },\n    {\n      loader: 'svgo-loader', options: {\n        plugins: [\n          { removeAttrs: { attrs: 'fill' } }\n        ]\n      }\n    }\n  ]\n},\n")])])]),s("p",[s("strong",[t._v("如何使用")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("// 引入单个\nrequire('icons/money.svg')\n\n<svg>\n  <use xlinkHref=\"#money\">\n</svg>\n\n// 引入多个\nimport React from 'react';\nimport cs from 'classnames';\n\nlet importAll = (requireContext: __WebpackModuleApi.RequireContext) =>\n\trequireContext.keys().forEach(requireContext);\ntry {\n\timportAll(require.context('icons', true, /\\.svg$/));\n} catch (error) {\n\tconsole.log(error);\n}\n\ntype Props = {\n\tname?: string;\n} & React.SVGAttributes<SVGElement>\n\nconst Icon = (props: Props) => {\n\tconst {name, children, className, ...rest} = props\n\treturn (\n\t\t<svg className={cs('icon',className)} {...rest}>\n\t\t\t{props.name && <use xlinkHref={'#' + props.name}></use>}\n\t\t</svg>\n\t);\n};\n\nexport default Icon;\n")])])]),s("h2",{attrs:{id:"自定义-hook"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#自定义-hook"}},[t._v("#")]),t._v(" 自定义 HOOK")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("import {useState, useEffect} from 'react';\nimport {createId} from 'lib/createId';\nimport {useUpdate} from 'hooks/useUpdate';\n\nconst useTags = ()=>{\n  const [tags,setTags] = useState<{id:number;name:string}[]>([]);\n  useEffect(()=>{\n    let localTags = JSON.parse(window.localStorage.getItem('tags') || '[]');\n    if(localTags.length === 0){\n      localTags = [\n        {id:createId(),name:'衣'},\n        {id:createId(),name:'食'},\n        {id:createId(),name:'住'},\n        {id:createId(),name:'行'}\n      ];\n    }\n    setTags(localTags);\n  },[]);\n\n  useUpdate(()=>{\n    window.localStorage.setItem('tags',JSON.stringify(tags));\n  },[tags]);\n\n  const findTag = (id:number) => tags.filter(tag => tag.id === id)[0];\n\n  const updateTag = (id:number, {name}: {name: string}) =>{\n    setTags(tags.map(tag => tag.id === id ? {id,name:name} : tag));\n  };\n\n  const deleteTag = (id:number) => {\n    setTags(tags.filter(tag => tag.id !== id));\n  };　\n\n  const addTag = ()=>{\n    const tagName = window.prompt('新增的名称为：');\n    if(tagName !== null && tagName !== ''){\n      setTags([...tags,{id: createId(), name: tagName}]);\n    }\n  };\n\n  const getName = (id:number) =>{\n    const tag = tags.filter(t => t.id === id)[0];\n    return tag ?　tag.name: '';\n  };\n\n  return {tags,getName,addTag,setTags,findTag,updateTag,deleteTag};\n};\n\nexport {useTags};\n")])])])])}),[],!1,null,null,null);e.default=n.exports}}]);