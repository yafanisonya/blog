(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{414:function(t,n,e){"use strict";e.r(n);var s=e(55),a=Object(s.a)({},(function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"用户登录流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#用户登录流程"}},[t._v("#")]),t._v(" 用户登录流程")]),t._v(" "),e("ul",[e("li",[t._v("调用 wx.login() 获取 临时登录凭证 code ，并回传到开发者服务器。")]),t._v(" "),e("li",[t._v("调用 auth.code2Session 接口，换取用户唯一标识 OpenID 和会话密钥 session_key。自定义登录状态关联 openid 和 session_key，返回自定义登录状态")]),t._v(" "),e("li",[t._v("前端缓存自定义状态到 storage，wx.request()携带自定义登录状态请求数据")]),t._v(" "),e("li",[t._v("开发者服务器通过自定义登录状态查询 openid 和 session_key，验证通过返回业务数据")])]),t._v(" "),e("p",[e("img",{attrs:{src:"https://i.imgur.com/qoCwg3W.jpg",alt:"登录流程"}})]),t._v(" "),e("h2",{attrs:{id:"request-封装"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#request-封装"}},[t._v("#")]),t._v(" Request 封装")]),t._v(" "),e("ol",[e("li",[t._v("在 app.js 配置域名")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("App({\n  onLaunch: function() {\n  },\n  globalData: {\n      userInfo: null,\n      loginCode: null,\n      version: '1.0.0',\n      host: 'https://**',\n  }\n})\n")])])]),e("ol",{attrs:{start:"2"}},[e("li",[t._v("封装 request\n"),e("blockquote",[e("p",[t._v("在目录建立 api 文件夹，并在文件夹下创建 api.js")])])])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("const app = getApp()\n\nconst request = (url, options) => {\n   return new Promise((resolve, reject) => {\n       wx.request({\n           url: `${app.globalData.host}${url}`,\n           method: options.method,\n           data: options.method === 'GET' ? options.data : JSON.stringify(options.data),\n           header: {\n               'Content-Type': 'application/json; charset=UTF-8',\n               'x-token': 'x-token'  // 看自己是否需要\n           },\n           success(request) {\n               if (request.data.code === 2000) {\n                   resolve(request.data)\n               } else {\n                   reject(request.data)\n               }\n           },\n           fail(error) {\n               reject(error.data)\n           }\n       })\n   })\n}\n\nconst get = (url, options = {}) => {\n   return request(url, { method: 'GET', data: options })\n}\n\nconst post = (url, options) => {\n   return request(url, { method: 'POST', data: options })\n}\n\nconst put = (url, options) => {\n   return request(url, { method: 'PUT', data: options })\n}\n\n// 不能声明DELETE（关键字）\nconst remove = (url, options) => {\n   return request(url, { method: 'DELETE', data: options })\n}\n\nmodule.exports = {\n   get,\n   post,\n   put,\n   remove\n}\n")])])]),e("ol",{attrs:{start:"3"}},[e("li",[t._v("管理 api 接口\n"),e("blockquote",[e("p",[t._v("在 page 中加入一个 api 文件夹,在下面在加入一个 api.js 来封装所有的接口")])])])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// 获取首页资源\nconst getMainPage = 'api/mainPage/getMainPage'\n\n//抛出getMainPage这个常量\nmodule.exports = {\n  getMainPage\n}\n")])])]),e("ol",{attrs:{start:"4"}},[e("li",[t._v("使用封装过后的 api")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// 引用api.js和request.js\nimport { getMainPage} from '../api/api.js'\nimport api from '../../utils/request.js'\n\n// 在onload方法中调用接口和方法\nonLoad: function(options) {\n  //调用接口\n  api.post(getMainPage).then(res => {\n  //成功时回调函数\n    console.log(res)\n  }).catch(err => {\n  //失败时回调函数\n    console.log(err)\n  })\n},\n\n")])])])])}),[],!1,null,null,null);n.default=a.exports}}]);