(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{419:function(n,t,a){"use strict";a.r(t);var e=a(55),s=Object(e.a)({},(function(){var n=this,t=n.$createElement,a=n._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h3",{attrs:{id:"typescript"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#typescript"}},[n._v("#")]),n._v(" TypeScript")]),n._v(" "),a("h4",{attrs:{id:"什么是-typescript"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是-typescript"}},[n._v("#")]),n._v(" 什么是 TypeScript")]),n._v(" "),a("ul",[a("li",[n._v("TypeScript 是 JavaScript 的超集，扩展了 JavaScript 的语法")]),n._v(" "),a("li",[n._v("TypeScript 通过类型注解提供编译时的静态类型检查")]),n._v(" "),a("li",[n._v("TypeScript 可处理已有的 JavaScript 代码，并只对其中的 TypeScript 代码进行编译")])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("const hello = (name: any) => {\n  console.log(`Hello, ${name}`)\n}\n\nhello('TypeScript')\n")])])]),a("h5",{attrs:{id:"原始数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原始数据类型"}},[n._v("#")]),n._v(" 原始数据类型")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("const a: string = 'foobar'\nconst b: number = 100\nconst c: boolean = true\nconst e: void = undefined\nconst f: null = null\nconst g: undefined = undefined\nconst h: symbol = Symbol()\n")])])]),a("h5",{attrs:{id:"object-类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#object-类型"}},[n._v("#")]),n._v(" Object 类型")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("const foo1: object = function(){}\n\nconst foo2: { foo: number, bar: string} = { foo: 123, bar: 'string'}\n\n")])])]),a("h5",{attrs:{id:"数组类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数组类型"}},[n._v("#")]),n._v(" 数组类型")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("const arr1: Array<number> = [1, 2, 3]\n\nconst arr2: number[] = [1, 2, 3]\n\n")])])]),a("h5",{attrs:{id:"元组-tuple"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#元组-tuple"}},[n._v("#")]),n._v(" 元组 Tuple")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("const tuple1: [number, string] = [19, 'fanison']\n\nconst entries: [string, number][] = Object.entries({\n  foo: 123,\n  bar: 456\n})\n\nconst [key, value] = entries[0]\n// key => foo, value => 123\n")])])]),a("h5",{attrs:{id:"枚举-enum"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#枚举-enum"}},[n._v("#")]),n._v(" 枚举 Enum")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("enum PostStatus {\n  Draft = 6,\n  Unpublished, // 7\n  Published // 8\n}\n")])])]),a("h5",{attrs:{id:"函数类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数类型"}},[n._v("#")]),n._v(" 函数类型")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("function func1(a: number, b: number): string{\n  return 'func1'\n}\n\nconst func2: (a: number, b: number) => string = function(a: number, b:number): string{\n  return 'func2'\n}\n\n")])])]),a("h5",{attrs:{id:"任意类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#任意类型"}},[n._v("#")]),n._v(" 任意类型")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("function stringify(value: any){\n  return JSON.stringify(value)\n}\n\n")])])]),a("h5",{attrs:{id:"隐式类型推断"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#隐式类型推断"}},[n._v("#")]),n._v(" 隐式类型推断")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("let age = 19 // number\nlet foo = 'str' // string\n")])])]),a("h5",{attrs:{id:"类型断言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型断言"}},[n._v("#")]),n._v(" 类型断言")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("const nums = [110, 120, 130, 140]\nconst res = nums.find(i => i > 0)\n\nconst num1 = res as number\n// JSX 下不能使用\nconst num2 = <number>res\n")])])]),a("h5",{attrs:{id:"接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#接口"}},[n._v("#")]),n._v(" 接口")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("interface Post{\n  title: string\n  age: number\n  // 可选成员\n  subtitle?: string\n  // 只读成员\n  readonly summary: string\n}\n\nfunction printPost(post: Post){\n  console.log(post)\n}\n\nprintPost({\n  title: 'this is title',\n  age: 18，\n  summary: 'read text'\n})\n\ninterface Cache{\n  [prop: string]: string\n}\nconst cache: Cache = {}\ncache.foo = 'value1'\n")])])]),a("h5",{attrs:{id:"类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类"}},[n._v("#")]),n._v(" 类")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("class Person {\n  name: string\n  age: number\n\n  constructor(name: string, age: number){\n  this.name = name\n  this.age = age\n}\n\nsayHi(msg: string): void{\n  console.log('name and msg',name,msg)\n}\n}\n")])])]),a("h5",{attrs:{id:"类与接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类与接口"}},[n._v("#")]),n._v(" 类与接口")]),n._v(" "),a("ul",[a("li",[n._v("类使用 implements 关键字实现多个接口")])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("interface Eat {\n  eat(food: string): void\n}\n\ninterface Run {\n  run(distance: number): void\n}\n\nclass Person implements Eat, Run {\n  eat(food: string): void {\n    console.log('eat ==>',food)\n  }\n\n  run(distance: number){\n    console.log('run ==>', run)\n  }\n}\n")])])]),a("h5",{attrs:{id:"抽象类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#抽象类"}},[n._v("#")]),n._v(" 抽象类")]),n._v(" "),a("ul",[a("li",[n._v("定义一个抽象类，并定义一个抽象方法")]),n._v(" "),a("li",[n._v("抽象类中的抽象方法必须被子类实现")])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("abstract class Animal{\n  eat(food: string): void {\n    console.log('eat ==>',food)\n  }\n  abstract run(distance: number): void\n}\n\nclass Dog extends Animal {\n  run(distance: number): void {\n    console.log('run ==>', distance)\n  }\n}\n\nconst d1 = new Dog()\nd.run(200)\n")])])]),a("h5",{attrs:{id:"泛型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#泛型"}},[n._v("#")]),n._v(" 泛型")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("function createNumber(length: number, value: number): number[] {\n  const arr = Array<number>(length).fill(value)\n  return arr\n}\n\nfunction createString(length: number, value: string): string[] {\n  const arr = Array<string>(length).fill(value)\n  return arr\n}\n\nfunction createArray<T>(length: number, value: T): T[] {\n  const arr = Array<T>(length).fill(value)\n  return arr\n}\n\nconst res1 = createArray<string>(3,'foo')\nconst res2 = createArray<number>(3,3)\n")])])])])}),[],!1,null,null,null);t.default=s.exports}}]);