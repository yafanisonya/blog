(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{405:function(n,t,s){"use strict";s.r(t);var a=s(55),e=Object(a.a)({},(function(){var n=this,t=n.$createElement,s=n._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("h2",{attrs:{id:"数据类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据类型"}},[n._v("#")]),n._v(" 数据类型")]),n._v(" "),s("ul",[s("li",[n._v("字符串、数字、布尔、undefined、null、大整数、符号、对象")]),n._v(" "),s("li",[n._v("string、number、boolean、undefined、null、bigint、symbol、object")])]),n._v(" "),s("h2",{attrs:{id:"原型链"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原型链"}},[n._v("#")]),n._v(" 原型链")]),n._v(" "),s("p",[s("strong",[n._v("原型")]),n._v(":\n对象中固有的 proto 属性，该属性指向对象的 prototype 原型属性")]),n._v(" "),s("p",[s("strong",[n._v("构造函数")]),n._v(":\n可以通过 new 来 新建一个对象 的函数")]),n._v(" "),s("p",[s("strong",[n._v("实例")]),n._v("\n通过构造函数和 new 创建出来的对象。 通过 proto 指向原型，通过 constructor 指向构造函数。")]),n._v(" "),s("p",[s("strong",[n._v("原型链")]),n._v("是由原型对象组成，每个对象都有 proto 属性，指向了创建该对象的构造函数的原型，proto 将对象连接起来组成了原型链。是一个用来实现继承和共享属性的有限的对象链。")]),n._v(" "),s("ul",[s("li",[s("p",[n._v("属性查找机制: 当查找对象的属性时，如果实例对象自身不存在该属性，则沿着原型链往上一级查找，找到时则输出，不存在时，则继续沿着原型链往上一级查找，直至最顶级的原型对象 Object.prototype，如还是没找到，则输出 undefined；")])]),n._v(" "),s("li",[s("p",[n._v("属性修改机制: 只会修改实例对象本身的属性，如果不存在，则进行添加该属性，如果需要修改原型的属性时，则可以用: b.prototype.x = 2；但是这样会造成所有继承于该对象的实例的属性发生改变。")]),n._v(" "),s("ul",[s("li",[n._v("对象的 hasOwnProperty() 来检查对象自身中是否含有该属性")]),n._v(" "),s("li",[n._v("使用 in 检查对象中是否含有某个属性时，如果对象中没有但是原型链中有，也会返回 true")])])])]),n._v(" "),s("h2",{attrs:{id:"this-指向"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#this-指向"}},[n._v("#")]),n._v(" this 指向")]),n._v(" "),s("blockquote",[s("p",[n._v("优先级: new > call、apply、bind > 对象.方法 > 直接调用")])]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("// 1. 全局上下文\nfn()\nthis => window/global\n\n// 2. 直接调用函数\nobj.fn()\nthis => obj\n\nfn.call(xx)\nthis => xx\n\nfn.apply(xx)\nthis => xx\n\nfn.bind(xx)\nthis => xx\n\n// new+构造函数, this指向实例对象\nnew Fn()\nthis => 新的对象\n\n// 箭头函数没有this, 因此也不能绑定。里面的this会指向当前最近的非箭头函数的this，找不到就是window\nfn = ()=> {}\nthis => 外面的 this\n\n// DOM事件绑定\nonclick 和 addEventerListener 中 this 默认指向绑定事件的元素\n")])])]),s("h2",{attrs:{id:"new-关键字"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#new-关键字"}},[n._v("#")]),n._v(" new 关键字")]),n._v(" "),s("ol",[s("li",[n._v("创建临时对象/新对象")]),n._v(" "),s("li",[n._v("绑定原型")]),n._v(" "),s("li",[n._v("指定 this = 临时对象")]),n._v(" "),s("li",[n._v("执行构造函数")]),n._v(" "),s("li",[n._v("返回临时对象")])]),n._v(" "),s("h2",{attrs:{id:"立即执行函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#立即执行函数"}},[n._v("#")]),n._v(" 立即执行函数")]),n._v(" "),s("p",[n._v("立即执行函数：声明一个匿名函数，然后立即执行它。")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("(function(){alert('我是匿名函数')} ())  // 用括号把整个表达式包起来\n(function(){alert('我是匿名函数')}) ()  // 用括号把函数包起来\n!function(){alert('我是匿名函数')}()    // 求反，我们不在意值是多少，只想通过语法检查。\n")])])]),s("p",[n._v("在 ES6 之前，只能通过它来「创建局部作用域」\n使用 ES6 的 block + let 语法")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("{\n  let a = '我是局部变量啦'\n  console.log(a) // 能读取 a\n}\nconsole.log(a) // 找不到 a\n")])])]),s("h2",{attrs:{id:"闭包"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#闭包"}},[n._v("#")]),n._v(" 闭包")]),n._v(" "),s("p",[n._v("闭包是指有权访问另一个函数作用域中的变量的函数")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("const add2 = function () {\n  var count\n  return function add () { // 访问了外部变量的函数\n    count += 1\n  }\n}()\n\n// 注意：闭包不是 count，闭包也不是 add，闭包是 count + add 组成的整体。\n")])])]),s("ul",[s("li",[s("p",[n._v("用途：")]),n._v(" "),s("ol",[s("li",[n._v("避免污染全局环境。（因为用的是局部变量）")]),n._v(" "),s("li",[n._v("提供对局部变量的间接访问")]),n._v(" "),s("li",[n._v("维持变量，使其不被垃圾回收。")])])]),n._v(" "),s("li",[s("p",[n._v("缺点：闭包使用不当可能造成内存泄露")])])]),n._v(" "),s("h2",{attrs:{id:"js-实现类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#js-实现类"}},[n._v("#")]),n._v(" JS 实现类")]),n._v(" "),s("h3",{attrs:{id:"使用原型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用原型"}},[n._v("#")]),n._v(" 使用原型")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("function Dog(name){\n  this.name = name\n  this.legsNumber = 4\n}\n\nDog.prototype.kind = '狗'\n\nDog.prototype.say = function(){\n  console.log(`汪汪汪~ 我是${this.name}，我有${this.legsNumber}条腿。`)\n}\n\nDog.prototype.run = function(){\n  console.log(`${this.legsNumber}条腿跑起来。`)\n}\n\nconst d1 = new Dog('啸天') // Dog 函数就是一个类\nd1.say()\n")])])]),s("h3",{attrs:{id:"使用-class"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用-class"}},[n._v("#")]),n._v(" 使用 class")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("class Dog {\n  kind = '狗' // 等价于在 constructor 里写 this.kind = '狗'\n  constructor(name) {\n    this.name = name\n    this.legsNumber = 4\n  }\n  say(){\n    console.log(`汪汪汪~ 我是${this.name}，我有${this.legsNumber}条腿。`)\n  }\n  run(){\n    console.log(`${this.legsNumber}条腿跑起来。`)\n  }\n}\nconst d1 = new Dog('啸天')\nd1.say()\n")])])]),s("h2",{attrs:{id:"js-实现继承"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#js-实现继承"}},[n._v("#")]),n._v(" JS 实现继承")]),n._v(" "),s("h3",{attrs:{id:"使用原型链"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用原型链"}},[n._v("#")]),n._v(" 使用原型链")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("function Animal(legsNumber){\n  this.legsNumber = legsNumber\n}\nAnimal.prototype.kind = '动物'\n\nfunction Dog(name){\n  this.name = name\n  Animal.call(this, 4) // 关键代码1\n}\nDog.prototype.__proto__ = Animal.prototype // 关键代码2\n\nDog.prototype.kind = '狗'\nDog.prototype.say = function(){\n  console.log(`汪汪汪~ 我是${this.name}，我有${this.legsNumber}条腿。`)\n}\n\nconst d1 = new Dog('啸天') // Dog 函数就是一个类\nconsole.dir(d1)\n")])])]),s("p",[n._v("禁用关键代码 2，如何解决?")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("var f = function(){ }\nf.prototype = Animal.prototype\nDog.prototype = new f()\n")])])]),s("h3",{attrs:{id:"使用-class-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用-class-2"}},[n._v("#")]),n._v(" 使用 class")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("class Animal{\n  constructor(legsNumber){\n    this.legsNumber = legsNumber\n  }\n  run(){}\n}\n\nclass Dog extends Animal{\n  constructor(name) {\n    super(4)\n    this.name = name\n  }\n  say(){\n    console.log(`汪汪汪~ 我是${this.name}，我有${this.legsNumber}条腿。`)\n  }\n}\n")])])])])}),[],!1,null,null,null);t.default=e.exports}}]);